plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.19.0",
    slf4jVersion = "2.0.7"

allure {
    report {
        version.set(allureVersion)
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion) //версия интеграции фреймворка и Allure
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:6.11.2",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "org.junit.jupiter:junit-jupiter:5.9.2",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            'org.junit.jupiter:junit-jupiter-api:5.8.1',
            'org.seleniumhq.selenium:selenium-java:3.141.59',
            'io.github.bonigarcia:webdrivermanager:5.2.1',
            'org.aeonbits.owner:owner:1.0.4',
            'org.assertj:assertj-core:3.23.1'
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    systemProperties(System.getProperties())

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task ui_test(type: Test) {
    useJUnitPlatform {
        includeTags("ui")
    }
}

task one_property_test(type: Test) {
    useJUnitPlatform {
        includeTags("one_property")
    }
}

task hello_test(type: Test) {
    useJUnitPlatform {
        includeTags("hello")
    }
}